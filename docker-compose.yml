services:  
  #Proxy Service
  thozha_proxy:
    container_name: thozha_proxy
    image: traefik:latest    
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --api
      - --certificatesresolvers.le.acme.email=dev@net4ideas.com
      - --certificatesresolvers.le.acme.tlschallenge=true
    labels:
      - "traefik.enable=true"
      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    ports:
      - 80:80
      - 443:443
      #- 8080:8080
    restart: unless-stopped
    volumes:
      - .docker/traefik/dynamic_conf.yaml:/etc/traefik/dynamic_conf.yaml:ro
      - .docker/traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro      
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - .docker/certs:/etc/certs:ro
    networks:
      thozha-network:
      traefik-public:  
  
  #Nginx Service
  nginx:
    container_name: thozha_nginx
    image: nginx:alpine    
    restart: unless-stopped
    tty: true
    ports:
      - 8000:80      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.thozha.local`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.service=api-service"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api-service.loadbalancer.server.port=80"
    volumes:
      - ./:/var/www      
      - .docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - .docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      thozha-network:
      traefik-public:

  #frontend Service
  frontend:
    image: nginx:alpine
    container_name: thozha_frontend
    restart: unless-stopped
    tty: true
    ports:
      - "5000:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.thozha.local`)"
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.service=admin-service"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.services.admin-service.loadbalancer.server.port=80"
    volumes:
      - ./frontend:/usr/share/nginx/html
    networks:
      thozha-network:
      traefik-public:  
  
  #PHP Service
  api:
    build:
      args:
        user: www
        uid: 1000
      context: .
      dockerfile: .docker/php/Dockerfile
    image: thozha
    container_name: thozha
    restart: unless-stopped
    tty: true
    ports:
      - ${API_PORT}:${API_PORT}
      - ${SOCKET_PORT}:${SOCKET_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ws.rule=Host(`ws.thozha.local`)"
      - "traefik.http.routers.ws.entrypoints=web"
      - "traefik.http.routers.wss.rule=Host(`ws.thozha.local`)"
      - "traefik.http.routers.wss.entrypoints=websecure"
      - "traefik.http.routers.wss.tls=true"
      - "traefik.http.services.ws.loadbalancer.server.port=${SOCKET_PORT}"
      - "traefik.http.middlewares.websocket.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.middlewares.websocket.headers.customrequestheaders.Connection=Upgrade"
    environment:
      SERVICE_NAME: api
      SERVICE_TAGS: dev
    working_dir: /var/www
    depends_on:
      - thozha_pgdb   
    volumes:
      - ./:/var/www
      - .docker/php/php.ini:/usr/local/etc/php/conf.d/local.ini
      - .docker/php/supervisord.conf:/etc/supervisor/supervisord.conf
      - .docker/php/laravel-worker.conf:/etc/supervisor/conf.d/laravel-worker.conf
      - .docker/php/pulse-worker.conf:/etc/supervisor/conf.d/pulse-worker.conf
      - .docker/php/reverb-worker.conf:/etc/supervisor/conf.d/reverb-worker.conf  
      - .docker/php/startup.sh:/usr/local/etc/php/startup.sh
    networks:
      thozha-network:
      traefik-public:  

  #Postgres Service
  thozha_pgdb:
    container_name: thozha_pgdb
    image: postgres:alpine           
    restart: always
    tty: true
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_DB_TEST: ${DB_DATABASE_TEST}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - .docker/pgsql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - pgdata:/var/lib/postgresql/data
    networks:
      thozha-network:  

  #Mongo Service
  thozha_mongodb:
    container_name: thozha_mongodb
    image: mongo:latest    
    profiles: ['no-start']    
    restart: always
    ports:
      - ${NOSQL_DB_PORT}:${NOSQL_DB_PORT}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${NOSQL_DB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${NOSQL_DB_PASSWORD}
    volumes:
      - .docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongo_data:/data/db
    networks:
      thozha-network:

  thozha_redis_cache:
    container_name: thozha_redis_cache
    image: redis:latest    
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes: 
      - redis_data:/data
    networks:
      thozha-network:

  thozha_memcached:
    container_name: thozha_memcached
    image: memcached:latest   
    restart: always
    ports:
      - $MEMCACHED_PORT:$MEMCACHED_PORT
    networks:
      thozha-network:  

  thozha_localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:latest
    ports:
      - 4566:4566
      #- 4510-4559:4510-4559
      #- 8055:8080
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=1
      - SERVICES=s3
    volumes:
      #- "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"    
      - .docker/localstack/init-localstack.sh:/etc/localstack/init/ready.d/init-localstack.sh #make sure the file is executable chmod +x init-localstack.sh
      - .docker/localstack/volume:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock   
    networks:
      thozha-network:

#Docker Networks
networks:
  thozha-network:
    driver: bridge
  traefik-public:
    external: true

#Volumes
volumes:
  pgdata:
    driver: local
  pgdata_replica:
    driver: local
  mysqldata:
    driver: local
  redis_data:
    driver: local
  mssql_data:
    driver: local